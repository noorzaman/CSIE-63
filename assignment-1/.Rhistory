print(myFrame$Sum)
x <- runif(100, min=-1, max=1)
myFrame <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
print(myFrame)
y1 <- myFrame$X1
y2 <- myFrame$X40
plot(x, y1, col="red")
print(myFrame)
myFrame$Sum <- rowSums(myFrame)
print(myFrame)
x <- runif(100, min=-1, max=1)
myFrame <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
print(myFrame)
y1 <- myFrame$X1
y2 <- myFrame$X40
plot(x, y1, col="red")
print(myFrame)
myFrame$Sum <- rowSums(myFrame)
sum <- myFrame$Sum
print(myFrame)
xfit <- seq(min(sum), max(sum), length=20)
yfit <- dnorm(xfit, mean=mean(sum), sd=sd(sum))
yfit <- yfit*diff(h$mids[1:2]*length(sum))
lines(xfit, yfit, col="blue", lwd=2)
h <- hist(sum, breaks = 10, col="red", main = "Histogram with normal curve",
xlab="Row wise sum of matrix")
lines(xfit, yfit, col="blue", lwd=2)
x <- runif(100, min=-1, max=1)
myFrame <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
print(myFrame)
y1 <- myFrame$X1
y2 <- myFrame$X40
plot(x, y1, col="red")
print(myFrame)
myFrame$Sum <- rowSums(myFrame)
sum <- myFrame$Sum
print(myFrame)
xfit <- seq(min(sum), max(sum), length=20)
yfit <- dnorm(xfit, mean=mean(sum), sd=sd(sum))
yfit <- yfit*diff(h$mids[1:2]*length(sum))
lines(xfit, yfit, col="blue", lwd=2)
h <- hist(sum, breaks = 10, col="red", main = "Histogram with normal curve",
xlab="Row wise sum of matrix")
lines(xfit, yfit, col="blue", lwd=2)
x <- runif(100, min=-1, max=1)
myFrame <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
print(myFrame)
y1 <- myFrame$X1
y2 <- myFrame$X40
plot(x, y1, col="red")
plot(x, y2, col="red")
print(myFrame)
x <- runif(100, min=-1, max=1)
myFrame <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
print(myFrame)
y1 <- myFrame$X1
y2 <- myFrame$X40
#plot(x, y1, col="red")
#plot(x, y2, col="red")
print(myFrame)
counts <- table(x, myFrame$X1)
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
x <- runif(100, min=-1, max=1)
myFrame <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
print(myFrame)
y1 <- myFrame$X1
y2 <- myFrame$X40
#plot(x, y1, col="red")
#plot(x, y2, col="red")
print(myFrame)
counts <- table(myFrame$X1, x)
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
counts <- table(myFrame$X1, x)
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"), beside=TRUE)
x <- runif(100, min=-1, max=1)
myFrame <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
print(myFrame)
y1 <- myFrame$X1
y2 <- myFrame$X40
#plot(x, y1, col="red")
#plot(x, y2, col="red")
print(myFrame)
ggplot(data,aes(x=x, y=myFrame$X1, group=value))+
geom_bar(fill="white",color="black")+
geom_text(aes(label = myFrame$X1), size = 3, hjust = 0.5, vjust = 3, position ="stack") +
theme_bw()
library(ggplot2)
x <- runif(100, min=-1, max=1)
myFrame <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
print(myFrame)
y1 <- myFrame$X1
y2 <- myFrame$X40
#plot(x, y1, col="red")
#plot(x, y2, col="red")
print(myFrame)
ggplot(data,aes(x=x, y=myFrame$X1, group=value))+
geom_bar(fill="white",color="black")+
geom_text(aes(label = myFrame$X1), size = 3, hjust = 0.5, vjust = 3, position ="stack") +
theme_bw()
library(ggplot2)
x <- runif(100, min=-1, max=1)
myFrame <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
print(myFrame)
y1 <- myFrame$X1
y2 <- myFrame$X40
#plot(x, y1, col="red")
#plot(x, y2, col="red")
print(myFrame)
ggplot(data,aes(x=x, y=myFrame$X1, group=x))+
geom_bar(fill="white",color="black")+
geom_text(aes(label = myFrame$X1), size = 3, hjust = 0.5, vjust = 3, position ="stack") +
theme_bw()
x <- runif(100, min=-1, max=1)
myFrame <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
print(myFrame)
y1 <- myFrame$X1
y2 <- myFrame$X40
#plot(x, y1, col="red")
#plot(x, y2, col="red")
print(myFrame)
plot(y1, type="o", col="blue", ylim=c(0,12))
lines(y2, type="o", pch=22, lty=2, col="red")
title(main="Autos", col.main="red", font.main=4)
x <- runif(100, min=-1, max=1)
myFrame <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
print(myFrame)
y1 <- myFrame$X1
y2 <- myFrame$X40
#plot(x, y1, col="red")
#plot(x, y2, col="red")
print(myFrame)
barplot(y1)
x <- runif(100, min=-1, max=1)
myFrame <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
print(myFrame)
y1 <- myFrame$X1
y2 <- myFrame$X40
#plot(x, y1, col="red")
#plot(x, y2, col="red")
print(myFrame)
hist(y1)
x <- runif(100, min=-1, max=1)
myFrame <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
print(myFrame)
y1 <- myFrame$X1
y2 <- myFrame$X40
#plot(x, y1, col="red")
#plot(x, y2, col="red")
print(myFrame)
hist(y1)
x <- runif(100, min=-1, max=1)
myFrame <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
print(myFrame)
y1 <- myFrame$X1
y2 <- myFrame$X40
print(myFrame)
hist(y1)
hist(y2)
x <- runif(100, min=-1, max=1)
myFrame <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
print(myFrame)
y1 <- myFrame$X1
y2 <- myFrame$X40
print(myFrame)
hist(y1)
hist(y2)
myFrame$Sum <- rowSums(myFrame)
sum <- myFrame$Sum
print(myFrame)
hist(myFrame$Sum)
curve(dnorm(x, mean=mean(myFrame$Sum), sd=sd(myFrame$Sum)), add=TRUE, col = "blue")
x <- runif(100, min=-1, max=1)
myFrame <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
print(myFrame)
y1 <- myFrame$X1
y2 <- myFrame$X40
print(myFrame)
hist(y1)
hist(y2)
myFrame$Sum <- rowSums(myFrame)
sum <- myFrame$Sum
print(myFrame)
hist(myFrame$Sum)
curve(dnorm(x, mean=mean(myFrame$Sum), sd=sd(myFrame$Sum)), add=TRUE, col = "blue", prob = TRUE)
x <- runif(100, min=-1, max=1)
myFrame <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
print(myFrame)
y1 <- myFrame$X1
y2 <- myFrame$X40
print(myFrame)
hist(y1)
hist(y2)
myFrame$Sum <- rowSums(myFrame)
print(myFrame)
xfit <- seq(min(myFrame$Sum), max(myFrame$Sum), length=20)
yfit <- dnorm(xfit, mean=mean(myFrame$Sum), sd=sd(myFrame$Sum))
yfit <- yfit*diff(h$mids[1:2]*length(myFrame$Sum))
lines(xfit, yfit, col="blue", lwd=2)
h <- hist(myFrame$Sum, breaks = 10, col="red", main = "Histogram with normal curve",
xlab="Row wise sum of matrix")
lines(xfit, yfit, col="blue", lwd=2)
if (!require(random)) install.packages("random")
library(random)
rM <- randomNumbers(n=(40*100),min=-1, max=1, col=40, base="16", check=TRUE)
print(rM)
rMPnorm <- pnorm(rM, mean = 0, sd = 0, lower.tail = TRUE, log.p = FALSE)
rMPnorm$new <- rowSums(rMPnorm[,1:40])
rMPnorm$new
hist(rMPnorm$new, prob=TRUE, xlab="Sum", ylab="Frequency", main="Sum Vs Frequency Histogram")
curve(dnorm(x, mean=mean(rMPnorm$new), sd=sd(rMPnorm$new)), add=TRUE)
# Problem 4
library(ggplot2)
x <- runif(100, min=-1, max=1)
myFrame <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
print(myFrame)
y1 <- myFrame$X1
y2 <- myFrame$X40
print(myFrame)
# hist(y1)
# hist(y2)
myFrame$Sum <- rowSums(myFrame)
print(myFrame)
xfit <- seq(min(myFrame$Sum), max(myFrame$Sum), length=20)
yfit <- dnorm(xfit, mean=mean(myFrame$Sum), sd=sd(myFrame$Sum))
yfit <- yfit*diff(h$mids[1:2]*length(myFrame$Sum))
lines(xfit, yfit, col="blue", lwd=2)
h <- hist(myFrame$Sum, breaks = 10, col="red", main = "Histogram with normal curve",
xlab="Row wise sum of matrix")
lines(xfit, yfit, col="blue", lwd=2)
if (!require(random)) install.packages("random")
library(random)
rM <- randomNumbers(n=(40*100),min=-1, max=1, col=40, base="16", check=TRUE)
print(rM)
rMPnorm <- pnorm(rM, mean = 0, sd = 0, lower.tail = TRUE, log.p = FALSE)
rMPnorm$new <- rowSums(rMPnorm[,1:40])
rMPnorm$new
hist(rMPnorm$new, prob=TRUE, xlab="Sum", ylab="Frequency", main="Sum Vs Frequency Histogram")
curve(dnorm(x, mean=mean(rMPnorm$new), sd=sd(rMPnorm$new)), add=TRUE)
x <- runif(100, min=-1, max=1)
myFrame <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
print(myFrame)
y1 <- myFrame$X1
y2 <- myFrame$X40
print(myFrame)
hist(y1)
hist(y2)
myFrame$Sum <- rowSums(myFrame)
print(myFrame)
xfit <- seq(min(myFrame$Sum), max(myFrame$Sum), length=20)
yfit <- dnorm(xfit, mean=mean(myFrame$Sum), sd=sd(myFrame$Sum))
yfit <- yfit*diff(h$mids[1:2]*length(myFrame$Sum))
lines(xfit, yfit, col="blue", lwd=2)
h <- hist(myFrame$Sum, breaks = 10, col="red", main = "Histogram with normal curve",
xlab="Row wise sum of matrix")
lines(xfit, yfit, col="blue", lwd=2)
df <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
hist(df$X1)
hist(df$X40)
df$sum <- rowSums(df)
print(df)
x_norm <- seq(min(df$sum), max(df$sum), length=20)
y_norm <- (dnorm(xfit, mean=mean(df$sum), sd=sd(df$sum))) * (diff(h$mids[1:2]*length(df$sum)))
lines(x_norm, y_norm, col="blue", lwd=2)
h <- hist(df$sum, breaks = 10, col="yellow", main = "Histogram with Gaussian Curve", xlab="Sum", ylab="Sum")
lines(x_norm, y_norm, col="purple", lwd=2)
options(scipen = 999)
x <- seq(0, 60, by=1)
yP30 <- dbinom(x, 60, 0.3)
yP50 <- dbinom(x, 60, 0.5)
yP80 <- dbinom(x, 60, 0.8)
plot(x, yP30)
plot(x, yP50)
plot(x, yP80)
df <- data.frame(P30=numeric(),
P50=numeric(),
P80=numeric(),
stringsAsFactors=FALSE)
df["1st_quar",]   = c(quantile(yP30)[2]["25%"], quantile(yP50)[2], quantile(yP80)[2])
df["median",]     = c(quantile(yP30), quantile(yP50), quantile(yP80))
df["mean",]       = c(mean(yP30), mean(yP50), mean(yP80))
df["stdev",]      = c(sd(yP30), sd(yP50), sd(yP80))
df["3rd_quar",]   = c(quantile(yP30)[4], quantile(yP50)[4], quantile(yP80)[4])
print(df)
boxplot(df, horizontal = FALSE)
library(MASS)
head(faithful)
# 1. We first find the range of eruption durations.
duration = faithful$eruptions;
range(duration)
# 2. Break the range into non-overlapping intervals.
breaks = seq(1.5, 5.5, by=0.5);
breaks
# 3. Classify the eruption durations according to which interval they fall into.
duration.cut = cut(duration, breaks, right=FALSE)
duration.freq
duration.freq = table(duration.cut);
duration.freq
duration.freq = cbind(duration.freq)
duration.freq
# 4. "Compute the frequency of eruptions in each interval" or count the number of
#    eruption durations in each interval.
duration.freq = table(duration.cut)
duration.relfreq = duration.freq / nrow(faithful);
duration.relfreq
duration.cut
old = options(digits=3);
cbind(duration.freq, duration.relfreq)
duration = faithful$eruptions; # the eruption
waiting = faithful$waiting; # the waiting interval
head(cbind(duration, waiting));
# plot(duration, waiting, xlab="Eruption duration", ylab="Time waited")
model = lm(waiting ~ duration, data = faithful)
print(model)
plot(duration, waiting, xlab="Eruption duration", ylab="Time waited")
abline(model, col='blue', lwd = 4)
## ----------Problem 3
# By using the function eigen the eigenvalues and eigenvectors of the covariance matrix are computed
Eigenvalues <- eigen(cov(faithful))$values
print(Eigenvalues)
Eigenvectors <- eigen(cov(faithful))$vectors
print(Eigenvectors)
df <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
hist(df$X1)
hist(df$X40)
# Problem 5
df <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
hist(df$X1)
hist(df$X40)
# Problem 6
df$sum <- rowSums(df)
print(df)
x_norm <- seq(min(df$sum), max(df$sum), length=20)
y_norm <- (dnorm(xfit, mean=mean(df$sum), sd=sd(df$sum))) * (diff(h$mids[1:2]*length(df$sum)))
lines(x_norm, y_norm, col="blue", lwd=2)
h <- hist(df$sum, breaks = 10, col="yellow", main = "Histogram with Gaussian Curve", xlab="Frequency", ylab="Sum")
lines(x_norm, y_norm, col="purple", lwd=2)
df <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
#hist(df$X1)
#hist(df$X40)
# Problem 6
df$sum <- rowSums(df)
print(df)
x_norm <- seq(min(df$sum), max(df$sum), length=20)
y_norm <- (dnorm(xfit, mean=mean(df$sum), sd=sd(df$sum))) * (diff(h$mids[1:2]*length(df$sum)))
lines(x_norm, y_norm, col="blue", lwd=2)
h <- hist(df$sum, breaks = 10, col="yellow", main = "Histogram with Gaussian Curve", xlab="Frequency", ylab="Sum")
lines(x_norm, y_norm, col="purple", lwd=2)
df <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
#hist(df$X1)
#hist(df$X40)
# Problem 6
df$sum <- rowSums(df)
print(df)
x_norm <- seq(min(df$sum), max(df$sum), length=20)
y_norm <- (dnorm(xfit, mean=mean(df$sum), sd=sd(df$sum))) * (diff(h$mids[1:2]*length(df$sum)))
lines(x_norm, y_norm, col="blue", lwd=2)
h <- hist(df$sum, breaks = 10, col="yellow", main = "Histogram with Gaussian Curve", xlab="Frequency", ylab="Sum")
lines(x_norm, y_norm, col="purple", lwd=2)
df <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
#hist(df$X1)
#hist(df$X40)
# Problem 6
df$sum <- rowSums(df)
print(df)
x_norm <- seq(min(df$sum), max(df$sum), length=20)
y_norm <- (dnorm(xfit, mean=mean(df$sum), sd=sd(df$sum))) * (diff(h$mids[1:2]*length(df$sum)))
lines(x_norm, y_norm, col="blue", lwd=2)
h <- hist(df$sum, breaks = 10, col="yellow", main = "Histogram with Gaussian Curve", xlab="Frequency", ylab="Sum")
lines(x_norm, y_norm, col="purple", lwd=2)
# Problem 5
df <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
#hist(df$X1)
#hist(df$X40)
# Problem 6
df$sum <- rowSums(df)
print(df)
x_norm <- seq(min(df$sum), max(df$sum), length=20)
y_norm <- (dnorm(xfit, mean=mean(df$sum), sd=sd(df$sum))) * (diff(h$mids[1:2]*length(df$sum)))
lines(x_norm, y_norm, col="blue", lwd=2)
h <- hist(df$sum, breaks = 10, col="yellow", main = "Histogram with Gaussian Curve", xlab="Sum", ylab="Frequency")
lines(x_norm, y_norm, col="purple", lwd=2)
# Problem 5
df <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
#hist(df$X1)
#hist(df$X40)
# Problem 6
df$sum <- rowSums(df)
print(df)
x_norm <- seq(min(df$sum), max(df$sum), length=20)
y_norm <- (dnorm(xfit, mean=mean(df$sum), sd=sd(df$sum))) * (diff(h$mids[1:2]*length(df$sum)))
lines(x_norm, y_norm, col="blue", lwd=2)
h <- hist(df$sum, breaks = 10, col="yellow", main = "Histogram with Gaussian Curve", xlab="Sum", ylab="Frequency")
lines(x_norm, y_norm, col="purple", lwd=2)
# Problem 5
df <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
#hist(df$X1)
#hist(df$X40)
# Problem 6
df$sum <- rowSums(df)
print(df)
x_norm <- seq(min(df$sum), max(df$sum), length=20)
y_norm <- (dnorm(xfit, mean=mean(df$sum), sd=sd(df$sum))) * (diff(h$mids[1:2]*length(df$sum)))
lines(x_norm, y_norm, col="blue", lwd=2)
h <- hist(df$sum, breaks = 10, col="yellow", main = "Histogram with Gaussian Curve", xlab="Sum", ylab="Frequency")
lines(x_norm, y_norm, col="purple", lwd=2)
# Problem 5
df <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
#hist(df$X1)
#hist(df$X40)
# Problem 6
df$sum <- rowSums(df)
print(df)
x_norm <- seq(min(df$sum), max(df$sum), length=20)
y_norm <- (dnorm(xfit, mean=mean(df$sum), sd=sd(df$sum))) * (diff(h$mids[1:2]*length(df$sum)))
lines(x_norm, y_norm, col="blue", lwd=2)
h <- hist(df$sum, breaks = 10, col="yellow", main = "Histogram with Gaussian Curve", xlab="Sum", ylab="Frequency")
lines(x_norm, y_norm, col="purple", lwd=2)
library(MASS)
head(faithful)
# 1. We first find the range of eruption durations.
duration = faithful$eruptions;
range(duration)
# 2. Break the range into non-overlapping intervals.
breaks = seq(1.5, 5.5, by=0.5);
breaks
# 3. Classify the eruption durations according to which interval they fall into.
duration.cut = cut(duration, breaks, right=FALSE)
duration.freq
duration.freq = table(duration.cut);
duration.freq
duration.freq = cbind(duration.freq)
duration.freq
# 4. "Compute the frequency of eruptions in each interval" or count the number of
#    eruption durations in each interval.
duration.freq = table(duration.cut)
duration.relfreq = duration.freq / nrow(faithful);
duration.relfreq
duration.cut
old = options(digits=3);
cbind(duration.freq, duration.relfreq)
duration = faithful$eruptions; # the eruption
waiting = faithful$waiting; # the waiting interval
head(cbind(duration, waiting));
# plot(duration, waiting, xlab="Eruption duration", ylab="Time waited")
model = lm(waiting ~ duration, data = faithful)
print(model)
plot(duration, waiting, xlab="Eruption duration", ylab="Time waited")
abline(model, col='blue', lwd = 4)
## ----------Problem 3
# By using the function eigen the eigenvalues and eigenvectors of the covariance matrix are computed
Eigenvalues <- eigen(cov(faithful))$values
print(Eigenvalues)
Eigenvectors <- eigen(cov(faithful))$vectors
print(Eigenvectors)
# Prove that two eigin vectors are Orthogonal you multiply them using a Scalar Product
# scala product of two values should result in 0
# http://hyperphysics.phy-astr.gsu.edu/hbase/vsca.html
# http://www.purplemath.com/modules/mtrxmult.htm
# (A_x * B_x) + (A_y * B_y)
#        [,1]    [,2]
# [1,] 0.0755 -0.9971
# [2,] 0.9971  0.0755
# (0.0755 * 0.9971) + (-0.9971 * 0.0755) = 0
####### Further Work (outside of problem) ##############################
# http://statmath.wu.ac.at/~hornik/QFS1/principal_component-vignette.pdf
# The Principal Components can be estimated via a matrix multiplication
PC <- as.matrix(faithful) %*% Eigenvectors
# As a check of the result, we compute the covariance matrix of PC. The variances of cov(PC) should
# be equal to the Eigenvalues and the covariances should be 0 (aside from rounding errors) since the
# Principal Components have to be uncorrelated.
cov(PC)
# Eigenvalues[1:2]
Eigenvalues[1:2]
# cov(PC)[1:2, 1:2]
cov(PC)[1:2, 1:2]
# In a next step we calculate the proportions of the variation explained by the various components:
print(round(Eigenvalues/sum(Eigenvalues) * 100, digits = 2))
round(cumsum(Eigenvalues)/sum(Eigenvalues) * 100, digits = 2)
# The first component round(Eigenvalues[1]/sum(Eigenvalues)*100, digits=2) explains 99.87,
# and the first two eigenvectors of the covariance matrix explain 99.9 of the total variation in the data.
# This suggest that the effective dimension of the space of yield curves could be two and any of the yield
# curves from our data set can be described by a linear combination of the first two loadings, while the
# relative error being very small.
## ----------Problem 4
# https://stackoverflow.com/questions/39165340/dataframe-create-new-column-based-on-other-columns
df <- transform(faithful, type= ifelse(eruptions <= 3.1, "short", "long"))
# Checking Results of new column are correct
head(df)
# Making new vectors
waiting = df$waiting
type = df$type
# Creating a new boxplot
par(mfrow=c(1,2))
plot(duration, waiting, xlab="Eruption Duration", ylab="Time Waited", main="Eruption Duration vs Time Waited")
abline(model, col='blue', lwd = 4)
boxplot(waiting ~ type, horizontal = FALSE, xlab="Eruption Duration Type", ylab="Time Waited", main="Eruption Duration Type vs Time Waited")
df <- data.frame(replicate(40, runif(100, min = -1, max = 1)))
hist(df$X1)
hist(df$X40)
# Problem 6
df$sum <- rowSums(df)
print(df)
x_norm <- seq(min(df$sum), max(df$sum), length=20)
y_norm <- (dnorm(xfit, mean=mean(df$sum), sd=sd(df$sum))) * (diff(h$mids[1:2]*length(df$sum)))
lines(x_norm, y_norm, col="blue", lwd=2)
h <- hist(df$sum, breaks = 10, col="yellow", main = "Histogram with Gaussian Curve", xlab="Sum", ylab="Frequency")
lines(x_norm, y_norm, col="purple", lwd=2)
